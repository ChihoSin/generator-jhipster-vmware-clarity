import { Component, Input } from '@angular/core';
import { I<%= entityAngularName %> } from 'app/shared/model/<%= entityModelFileName %>.model';
import { <%= entityAngularName %>Service } from './<%= entityFileName %>.service';
import { PROGRESS_STATE } from 'app/shared/constants/load.constants';
import { PopupService } from '../../layouts';

@Component({
    selector: '<%= jhiPrefixDashed %>-<%= entityFileName %>-delete-dialog',
    templateUrl: './<%= entityFileName %>-delete-dialog.component.html'
})
export class <%= entityAngularName %>DeleteDialogComponent {
    @Input() item: I<%= entityAngularName %>;
    @Input() list: Array<I<%= entityAngularName %>>;
    @Input() callback: Function;
    progressIndex: number;
    progressValue: number;
    progressState: string;
    private _opened: any;

    constructor(
        private <%= entityInstance %>Service: <%= entityAngularName %>Service,
        private popupService: PopupService
    ) {
        this.progressIndex = 0;
        this.progressValue = 0;
        this.progressState = PROGRESS_STATE.READY;
        this.opened = true;
    }

    confirmDelete(id: <% if (pkType === 'String') { %>string<% } else { %>number<% } %>) {
        this.<%= entityInstance %>Service.delete(id).subscribe(response => {
            this.callback();
            this.opened = false;
        });
    }

    get opened() {
        return this._opened;
    }

    set opened(value: any) {
        this._opened = value;
        if (!value) {
            this.popupService.eject(this);
        }
    }

    confirmBatchDelete() {
        const loop = () => {
            this.<%= entityInstance %>Service.delete(this.list[this.progressIndex].id).subscribe(
                response => {
                    this.progressValue++;
                    if (this.progressIndex + 1 < this.list.length) {
                        this.progressIndex++;
                        loop();
                    } else {
                        this.progressState = PROGRESS_STATE.SUCCESS;
                        this.callback();
                        this.opened = false;
                    }
                },
                error => {
                    this.progressState = PROGRESS_STATE.ERROR;
                }
            );
        };
        this.progressState = PROGRESS_STATE.IN_PROGRESS;
        loop();
    }
}
