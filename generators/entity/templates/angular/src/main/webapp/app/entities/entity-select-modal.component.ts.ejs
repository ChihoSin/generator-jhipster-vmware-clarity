import { Component, OnInit, OnDestroy } from '@angular/core';
import { HttpErrorResponse,  HttpHeaders, HttpResponse } from '@angular/common/http';
import { Subscription } from 'rxjs/Subscription';
import { JhiEventManager, JhiParseLinks, JhiAlertService } from 'ng-jhipster';

import { I<%= entityAngularName %> } from 'app/shared/model/employee/<%= entityFileName %>.model';
import { Principal } from 'app/core';

import { ITEMS_PER_PAGE } from 'app/shared';
import { Subject } from 'rxjs/Subject';
import { ClrDatagridSortOrder, ClrDatagridStateInterface } from '@clr/angular';
import { SEARCH_DEBOUNCE_TIME } from 'app/shared/constants/load.constants';
import { <%= entityAngularName %>Service } from './<%= entityFileName %>.service';

import { resolveFilter } from 'app/shared/util/filter-util';
import {Router} from '@angular/router';
import {<%= entityAngularName %>SelectModalService} from 'app/entities/employee/<%= entityFileName %>/<%= entityFileName %>-select-modal.service';

@Component({
    selector: '<%= jhiPrefixDashed %>-<%= entityFileName %>-select-modal',
    templateUrl: './<%= entityFileName %>-select-modal.component.html',
    styleUrls: [
        './<%= entityFileName %>-select-modal.component.scss'
    ]
})
export class <%= entityAngularName %>SelectModalComponent implements OnInit, OnDestroy {
    currentAccount: any;
    <%= entityInstancePlural %>: I<%= entityAngularName %>[];
    error: any;
    success: any;
    eventSubscriber: Subscription;
    currentSearch: string;
    // routeData: any;
    links: any;
    totalItems: any;
    queryCount: any;
    itemsPerPage: any;
    page: any;
    predicate: any;
    previousPage: any;
    reverse: any;
    // added for Clarity
    loading: any;
    searchDebounce: Subject<ClrDatagridStateInterface>;
    filters: any;
    sorters: any;
    selected: any[];
    allSelected: any[];

    constructor(
        private <%= entityInstance %>Service: <%= entityAngularName %>Service,
        private parseLinks: JhiParseLinks,
        private jhiAlertService: JhiAlertService,
        private principal: Principal,
        private eventManager: JhiEventManager,
        private router: Router,
        public <%= entityInstance %>SelectModalService: <%= entityAngularName %>SelectModalService
    ) {
        // added for Clarity
        this.sorters = {
            id: ClrDatagridSortOrder.UNSORTED,
            name: ClrDatagridSortOrder.UNSORTED,
        };
        this.filters = {
            id: null,
            name: null,
        };

        this.itemsPerPage = ITEMS_PER_PAGE;
        this.loading = true;
        this.selected = [];
        this.allSelected = [...<%= entityInstance %>SelectModalService.selected];
        this.searchDebounce = new Subject<ClrDatagridStateInterface>();
        this.searchDebounce.debounceTime(SEARCH_DEBOUNCE_TIME).subscribe(() => this.loadAll());
    }

    get open() {
        return true;
    }

    set open(val) {
        if (!val) {
            this.<%= entityInstance %>SelectModalService.close();
        }
    }

    setSelected(list: any[]) {
        const dataset = [];
        if (!this.<%= entityInstancePlural %>) {
            return;
        }
        this.<%= entityInstancePlural %>.forEach(item => {
            let select = false;
            for (let i = 0; i < list.length; i++) {
                if (item.id === list[i].id) {
                    select = true;
                    break;
                }
            }
            dataset.push({
                data: item,
                select
            });
        });
        dataset.forEach(item => {
            for (let i = 0; i < this.allSelected.length; i++) {
                if (item.data.id && item.data.id === this.allSelected[i].id) {
                    if (!item.select) {
                        this.allSelected.splice(i, 1);
                    }
                    return;
                }
            }
            if (item.select) {
                this.allSelected.push(item.data);
            }
        });
    }

    // added for Clarity
    refresh(state: ClrDatagridStateInterface) {
        // added grid sort
        this.predicate = state.sort ? state.sort.by : 'id';
        this.reverse = state.sort ? state.sort.reverse : true;
        // added grid filter
        this.currentSearch = null;
        if (state.filters) {
            this.currentSearch = '';
            state.filters.forEach(filter => {
                if (filter['value'] !== '') {
                    switch (filter['property']) {
                        case 'name':
                            this.currentSearch += `(${resolveFilter(filter)}) AND `;
                            break;
                    }
                }
            });
            this.currentSearch += '*:*';
        }

        // fixed filter refresh debounce
        if (state.filters) {
            this.searchDebounce.next();
            return;
        }
        this.loadAll();
    }

    loadAll() {
        // added for Clarity
        this.loading = true;

        if (this.currentSearch) {
            this.<%= entityInstance %>Service.search({
                page: this.page - 1,
                query: this.currentSearch,
                size: this.itemsPerPage,
                // sort: this.sort()
            }).subscribe(
                (res: HttpResponse<I<%= entityAngularName %>[]>)  => this.paginate<%= entityClassPlural %>(res.body, res.headers),
                (res: HttpErrorResponse) => this.onError(res.message)
            );
            return;
        }
        this.<%= entityInstance %>Service.query({
            page: this.page - 1,
            size: this.itemsPerPage,
            // sort: this.sort()
        }).subscribe(
            (res: HttpResponse<I<%= entityAngularName %>[]>) => this.paginate<%= entityClassPlural %>(res.body, res.headers),
            (res: HttpErrorResponse) => this.onError(res.message)
        );
    }
    loadPage(page: number) {
        if (page !== this.previousPage) {
            this.previousPage = page;
            this.transition();
        }
    }
    transition() {
        this.loadAll();
    }
    clear() {
        this.page = 0;
        this.currentSearch = '';
        this.loadAll();
    }

    ngOnInit() {
        // remove for Clarity
        // this.loadAll();
        this.principal.identity().then(account => {
            this.currentAccount = account;
        });
        this.registerChangeIn<%= entityClassPlural %>();
    }

    ngOnDestroy() {
        // fixed router into error
        if (this.eventSubscriber) {
            this.eventManager.destroy(this.eventSubscriber);
        }
        // this.eventManager.destroy(this.eventSubscriber);
    }

    trackId(index: number, item: I<%= entityAngularName %>) {
        return item.id;
    }

    registerChangeIn<%= entityClassPlural %>() {
        this.eventSubscriber = this.eventManager.subscribe('<%= entityInstance %>ListModification', response => this.loadAll());
    }

    sort() {
        const result = [this.predicate + ',' + (this.reverse ? 'asc' : 'desc')];
        if (this.predicate !== 'id') {
            result.push('id');
        }
        return result;
    }

    remove(item: any) {
        for (let i = 0; i < this.selected.length; i++) {
            if (item.id === this.selected[i].id) {
                this.selected.splice(i, 1);
                return;
            }
        }
        for (let i = 0; i < this.allSelected.length; i++) {
            if (item.id === this.allSelected[i].id) {
                this.allSelected.splice(i, 1);
                break;
            }
        }
    }

    private paginate<%= entityClassPlural %>(data: I<%= entityAngularName %>[], headers: HttpHeaders) {
        this.totalItems = parseInt(headers.get('X-Total-Count'), 10);
        this.queryCount = this.totalItems;
        this.<%= entityInstancePlural %> = data;
        // added for Clarity
        this.loading = false;
    }

    private onError(errorMessage: string) {
        this.jhiAlertService.error(errorMessage, null, null);
    }

}
