    <%= entityInstancePlural %>: I<%= entityAngularName %>[];
    currentAccount: any;
    routeData: any;
    itemsPerPage: any;
    // added for Clarity
    loading: any;
    selected: Array<I<%= entityAngularName %>>;
    <%_ if (searchEngine === 'elasticsearch') {
      for (idx in fields) { 
        if (fields[idx].fieldIsEnum) { _%>
    <%=fields[idx].fieldName%>: Array<<%=fields[idx].fieldType%>>;
    <%_ }}} _%>
    <%_ for (idx in relationships) {
        const relationshipName = relationships[idx].relationshipName;
        _%>
    public <%= relationshipName %>SelectDialogComponent = <%= relationships[idx].otherEntityAngularName %>SelectDialogComponent;
    <%_ } _%>

    constructor(
        private <%= entityInstance %>Service: <%= entityAngularName %>Service,
        <%_ for (idx in relationships) {
        const relationshipName = relationships[idx].relationshipName;
        _%>
        public <%= relationshipName %>Service: <%= relationships[idx].otherEntityAngularName %>Service,
        <%_ } _%>
        private alertService: AlertService,
        <%_ if (fieldsContainBlob) { _%>
        private dataUtils: DataUtils,
        <%_ } _%>
        private principal: Principal,
        private popupService: PopupService,
        private router: Router
    ) {
        // added for Clarity
        this.loading = true;
        this.selected = [];

        <%_ if (searchEngine === 'elasticsearch') {
        for (idx in fields) { 
          if (fields[idx].fieldIsEnum) {
            const values = fields[idx].fieldValues.replace(/\s/g, '').split(',');
        _%>
        this.<%=fields[idx].fieldName%> = [
          <%_
            for (key in values) {
          _%>
            <%= fields[idx].fieldType %>.<%=values[key]%>,
          <%_ } _%>
        ];
        <%_ }}} _%>
    }

    loadAll() {
        this.loading = true;
        this.itemsPerPage = ITEMS_PER_PAGE;
        this.<%= entityInstance %>Service.query().subscribe(
            (res: HttpResponse<I<%= entityAngularName %>[]>) => {
                this.<%= entityInstancePlural %> = res.body;
                // added for Clarity
                this.loading = false;
            },
            (res: HttpErrorResponse) => this.onError(res.message)
        );
    }
