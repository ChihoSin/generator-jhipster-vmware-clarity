    <%= entityInstancePlural %>: I<%= entityAngularName %>[];
    currentAccount: any;
    eventSubscriber: Subscription;
    routeData: any;
    predicate: any;
    reverse: any;
    <%_ if (searchEngine === 'elasticsearch') { _%>
    currentSearch: string;
    <%_ } _%>
    // added for Clarity
    loading: any;
    searchDebounce: Subject<ClrDatagridStateInterface>;
    filters: any;
    sorters: any;
    selected: any[];

    constructor(
        private <%= entityInstance %>Service: <%= entityAngularName %>Service,
        private jhiAlertService: JhiAlertService,
        <%_ if (fieldsContainBlob) { _%>
        private dataUtils: JhiDataUtils,
        <%_ } _%>
        private eventManager: JhiEventManager,
        <%_ if (searchEngine === 'elasticsearch') { _%>
        private activatedRoute: ActivatedRoute,
        <%_ } _%>
        private principal: Principal,
        private router: Router
    ) {
        // added for Clarity
        this.sorters = {
          id: ClrDatagridSortOrder.UNSORTED,
          <%_ for (idx in fields) { _%>
          <%= fields[idx].fieldName %>: ClrDatagridSortOrder.UNSORTED,
          <%_ } _%>
        };
        this.filters = {
          id: null,
          <%_ for (idx in fields) { _%>
          <%= fields[idx].fieldName %>:  null,
          <%_ } _%>
        };
        this.routeData = this.activatedRoute.data.subscribe(data => {
            this.reverse = data.pagingParams.ascending;
            this.predicate = data.pagingParams.predicate;
            // added for Clarity
            if (this.predicate !== 'id') {
              this.sorters[this.predicate] = this.reverse ? ClrDatagridSortOrder.DESC : ClrDatagridSortOrder.ASC;
            }
        });
        <%_ if (searchEngine === 'elasticsearch') { _%>
        this.currentSearch = this.activatedRoute.snapshot && this.activatedRoute.snapshot.params['search'] ?
            this.activatedRoute.snapshot.params['search'] : '';
        <%_ } _%>

        this.filters = decodeFiltersQueryParam(this.filters, activatedRoute.queryParams['value'].query);
        
        this.loading = true;
        this.selected = [];
        this.searchDebounce = new Subject<ClrDatagridStateInterface>();
        this.searchDebounce.debounceTime(SEARCH_DEBOUNCE_TIME).subscribe(() => this.loadAll());
    }

    // added for Clarity
    refresh(state: ClrDatagridStateInterface) {
      // added grid sort
      this.predicate = state.sort ? state.sort.by : 'id';
      this.reverse = state.sort ? state.sort.reverse : true;
      // added grid filter
      this.currentSearch = null;
      if (state.filters) {
        this.currentSearch = '';
        state.filters.forEach(filter => {
          if (filter['value'] !== '') {
            switch (filter['property']) {
              <%_ for (idx in fields) { _%>
              case '<%= fields[idx].fieldName %>':
                this.currentSearch += `(${resolveFilter(filter)}) AND `;
                break;
              <%_ } _%>
            }
          }
        });
        this.currentSearch += '*:*';
      }

      this.router.navigate(['/<%= microserviceName %>/<%= entityUrl %>'], {
        queryParams: {
          query: encodeFiltersQueryParam(state.filters),
          sort: this.predicate + ',' + (this.reverse ? 'asc' : 'desc')
        }
      });

      // fixed filter refresh debounce
      if (state.filters) {
        this.searchDebounce.next();
        return;
      }
      this.loadAll();
    }

    loadAll() {
        <%_ if (searchEngine === 'elasticsearch') { _%>
        if (this.currentSearch) {
            this.<%= entityInstance %>Service.search({
                query: this.currentSearch,
                sort: this.sort()
                }).subscribe(
                    (res: HttpResponse<I<%= entityAngularName %>[]>) => this.<%= entityInstancePlural %> = res.body,
                    (res: HttpErrorResponse) => this.onError(res.message)
                );
            return;
       }
       <%_ } _%>
        this.<%= entityInstance %>Service.query().subscribe(
            (res: HttpResponse<I<%= entityAngularName %>[]>) => {
                this.<%= entityInstancePlural %> = res.body;
                <%_ if (searchEngine === 'elasticsearch') { _%>
                this.currentSearch = '';
                <%_ } _%>
                // added for Clarity
                this.loading = false;
            },
            (res: HttpErrorResponse) => this.onError(res.message)
        );
    }
