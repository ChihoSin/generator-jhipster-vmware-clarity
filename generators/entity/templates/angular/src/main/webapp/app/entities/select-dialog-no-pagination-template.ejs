    <%= entityInstancePlural %>: I<%= entityAngularName %>[];
    routeData: any;
    // added for Clarity
    loading: any;
    itemsPerPage: number;
    @Input() callback: Function;
    @Input() selected: any;
    @Input() multiSelect: boolean;
    private _opened: any;
    <%_ for (idx in relationships) {
        const relationshipName = relationships[idx].relationshipName;
        _%>
    public <%= relationshipName %>SelectDialogComponent = <%= relationships[idx].otherEntityAngularName %>SelectDialogComponent;
    <%_ } _%>

    constructor(
        private <%= entityInstance %>Service: <%= entityAngularName %>Service,
        <%_ for (idx in relationships) {
        const relationshipName = relationships[idx].relationshipName;
        _%>
        public <%= relationshipName %>Service: <%= relationships[idx].otherEntityAngularName %>Service,
        <%_ } _%>
        private alertService: AlertService,
        <%_ if (fieldsContainBlob) { _%>
        private dataUtils: DataUtils,
        <%_ } _%>
        private principal: Principal,
        private popupService: PopupService
    ) {
        // added for Clarity
        this.loading = true;
        this.selected = this.multiSelect ? this.selected :
            this.selected && this.selected.length > 0 ? this.selected[0] : null;
        this.itemsPerPage = ITEMS_PER_PAGE;
    }

    loadAll() {
        this.<%= entityInstance %>Service.query().subscribe(
            (res: HttpResponse<I<%= entityAngularName %>[]>) => {
                const data = res.body;
                this.<%= entityInstancePlural %> = data;
                // added for Clarity
                this.loading = false;
                if (this.multiSelect) {
                    data.forEach(item => {
                        for (let i = 0; i < this.selected.length; i++) {
                            if (item.id === this.selected[i].id) {
                                this.selected[i] = item;
                                break;
                            }
                        }
                    });
                } else if (this.selected) {
                    data.forEach(item => {
                        if (this.selected.id === item.id) {
                            this.selected = item;
                            return false;
                        }
                    });
                }
            },
            (res: HttpErrorResponse) => this.onError(res.message)
        );
    }
