    <%= entityInstancePlural %>: I<%= entityAngularName %>[];
    eventSubscriber: Subscription;
    routeData: any;
    // added for Clarity
    loading: any;
    @Input() callback: Function;
    @Input() selected: any;
    @Input() multiSelect: boolean;
    @Input() close: Function;
    private _opened: any;

    constructor(
        private <%= entityInstance %>Service: <%= entityAngularName %>Service,
        private jhiAlertService: JhiAlertService,
        <%_ if (fieldsContainBlob) { _%>
        private dataUtils: JhiDataUtils,
        <%_ } _%>
        private eventManager: JhiEventManager,
        private principal: Principal,
        private router: Router
    ) {
        // added for Clarity
        this.loading = true;
        this.selected = this.multiSelect ? this.selected :
            this.selected && this.selected.length > 0 ? this.selected[0] : null;
    }

    loadAll() {
        this.<%= entityInstance %>Service.query().subscribe(
            (res: HttpResponse<I<%= entityAngularName %>[]>) => {
                this.<%= entityInstancePlural %> = res.body;
                // added for Clarity
                this.loading = false;
                res.body.forEach(item => {
                    for (let i = 0; i < this.selected.length; i++) {
                        if (item.id === this.selected[i].id) {
                            this.selected[i] = item;
                            break;
                        }
                    }
                });
            },
            (res: HttpErrorResponse) => this.onError(res.message)
        );
    }
