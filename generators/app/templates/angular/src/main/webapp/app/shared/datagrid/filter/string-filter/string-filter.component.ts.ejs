import {Component, OnInit, OnDestroy, Input, Output, EventEmitter} from '@angular/core';
import {Subject} from 'rxjs/Subject';
import {ClrDatagridFilter, ClrDatagridFilterInterface} from '@clr/angular';
import {FilterRelationship, FilterType} from 'app/shared/util/filter-util';

@Component({
  selector: '<%= jhiPrefixDashed %>-string-filter',
  templateUrl: './string-filter.component.html',
  styleUrls: [
    './string-filter.component.scss'
  ]
})
export class <%=jhiPrefixCapitalized%>StringFilterComponent implements ClrDatagridFilterInterface<any> {
  @Output('clrFilterValueChange') clrFilterValueChange = new EventEmitter();
  changes = new Subject<any>();
  property: string;
  value: any;
  stringContainType = FilterType.STRING_CONTAIN;
  stringAdvancedType = FilterType.STRING_ADVANCED;

  constructor(public filterFn: ClrDatagridFilter) {
    this.filterFn.setFilter(this);
    this.value = {
      type: FilterType.STRING_CONTAIN,
      enableAdvancedFilter: false,
      keyWord: null,
      primarySymbol: null,
      primaryValue: null,
      secondarySymbol: null,
      secondaryValue: null,
      relationship: FilterRelationship.AND,
    };
  }

  @Input('clrDgField')
  public set field(field: string) {
    if (typeof field === 'string') {
      this.property = field;
    }
  }

  @Input('clrFilterValue')
  public set clrFilterValue(filter: any) {
    if (filter && filter.value) {
      this.value = filter.value;
    }
  }

  isActive(): boolean {
    return this.value && (this.value.keyWord || this.value.primaryValue);
  }

  accepts(item: any): boolean {
    return false;
  }

  submit() {
    this.value.type = this.value.enableAdvancedFilter ? this.stringAdvancedType : this.stringContainType;
    this.changes.next(true);
  }

}
